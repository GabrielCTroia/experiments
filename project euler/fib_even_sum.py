# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not
# exceed four million, find the sum of the even-valued terms.

def fib_dp(n):
	backOne = 1
	backTwo = 0
	sumed = 0

	for i in range(0, n):
		sumed = backOne + backTwo
		backOne = backTwo
		backTwo = sumed

	return backOne + backTwo


c = 0
fib = 0
last = 0
even_sum = 0
while (fib < 4000000 - last):
	last = fib
	c += 1
	fib = fib_dp(c)
	even_sum += fib if fib % 2 == 0 else 0


print even_sum

# print fib_dp(int(raw_input('n = ')))